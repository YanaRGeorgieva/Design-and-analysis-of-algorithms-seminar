ПРИПОМНЕТЕ СИ НЕЩАТА ТУК https://www.bigocheatsheet.com/!
Ще ползваме тези структури данни и алгоритми нонстоп, така че трябва да им знаем кусурите и плюсовете.
Припомнете си долни граници върху сложност на задачи като сортиране, търсене на елемент в сортирам масив
и тн. нататък ще ни трябват.

Полезни линкове:
http://www.informatika.bg/
https://www.geeksforgeeks.org/array-data-structure/

Задачи, които все по някакъв начин мисля да рещим част от тях, а други да ви напиша решения само.

-0. Дадени са n естествени числа в интервала [1, k]. Предложете алгоритъм, който прави първоначална
обработка (preprocessing) на числата, след което отговаря на въпроса 
"Колко от дадените числа са в интервала [а, b]?" 
за константно време. Време за рreprocessing-а: О(n+k).

-0*. Сега въпросът e "Колко е сумата на числата, които са в интервала [а, b]?".

-1. Намерете симетричната разлика на два масива а[1, .. , n] и b[1, .. , m].
    https://www.geeksforgeeks.org/symmetric-difference-two-sorted-array/
    // C++ program to find the symmetric difference 
    // of two sorted array
    void symmDiff(int arr1[], int arr2[], int n, int m) 
    { 
        // Traverse both arrays simultaneously. 
        int i = 0, j = 0; 
        while (i < n && j < m) 
        { 
            // Print smaller element and move 
            // ahead in array with smaller element 
            if (arr1[i] < arr2[j]) 
            { 
                cout << arr1[i]<<" "; 
                i++; 
            } 
            else if (arr2[j] < arr1[i]) 
            { 
                cout << arr2[j]<<" "; 
                j++; 
            } 

            // If both elements same, move ahead 
            // in both arrays. 
            else
            { 
                i++; 
                j++; 
            } 
        } 
    
        while (i < n)
        {
            cout << arr1[i]<<" "; 
            i++;
        }
    
        while (j < m)
        {
            cout << arr2[j]<<" "; 
            j++;
        }
    } 

// Driver code 
int main() 
{ 
	int arr1[] = {2, 4, 5, 7, 8, 10, 12, 15, 19}; 
	int arr2[] = {5, 8, 11, 12, 14, 15}; 
	int n = sizeof(arr1)/sizeof(arr1[0]); 
	int m = sizeof(arr2)/sizeof(arr2[0]); 
	symmDiff(arr1, arr2, n, m); 
	return 0; 
} 

    
void symmetricDifferenceHash(int* a, int* b, int n, int m)
{
    std::unordered_set<int> s;
    for (int i = 0; i < n; i++)
    {
        s.insert(a[i]);
    }
    for (int i = 0; i < m; i++)
    {
        if (s.find(b[i]) != s.end()) // Found b[i] in a
        { 
            s.erase(b[i]);
        } 
        else // b[i] is not in a
        {
            s.insert(b[i]);
        }
    }
}
s.erase(..)
Average case: Linear in the number of elements removed.
Worst case: Linear in the container size.
s.insert(..)
Single element insertions:
Average case: constant.
Worst case: linear in container size.
Multiple elements insertion:
Average case: linear in the number of elements inserted.
Worst case: N*(size+1): number of elements inserted times the container size 
plus one.
May trigger a rehash (not included).
s.find(..)
Average case: constant.
Worst case: linear in container size.

Следователно тук очакваната сложност е O(n + n*m).

2. Дадени са масив с цели числа а[] и просто число р. Да се построи нов масив b[], в 
който b[i] е произведението на всички числа от оригиналния масив с изключение на а[i], 
взето по модул р. 
    (Напр. р=1 000 007; директното умножаване на всички числа може да прехвърли
    целочислените типове).
    Brute force е O(n*(n-1)) операции *.
    !! Mодулната аритметика:
        Всяка единична операция се прави по модул: https://en.wikipedia.org/wiki/Modular_arithmetic
        Забележете, че (a / b) % p != (a % p) / (b % p), но за p просто число операцията "делене" 
        може да бъде заменена с операция "умножение по инверсното на делителя", тъй като всеки 
        елемент на групата  Z_p  е обратим (намираме инверсното като използваме 
        https://en.wikipedia.org/wiki/Fermat%27s_little_theorem,
        че a^(-1)≡a^(p-2)(mod p) (с бързо степенуване).
        тогава веднъж правим prod = a[1]*...*a[n] и след това по горната ф-ла 
        a[i] = a[i]^(-1) и -> b[i] = prod * a[i]
        O(n+p)
        http://www.informatika.bg/interviews#MultiplyTheOthers
        
-3. Дадени са сортираните масиви а[1, .. , n] и b[1, .. , n]. Да се намери медианата на масива, който се получава при сливането на двата масива.
    https://www.geeksforgeeks.org/median-of-two-sorted-arrays/
    
HW-3*. Дадени са сортираните масиви а[1, .. , n] и b[1, .. , m]. Отново да се намери медианата на масива, който се получава при сливането на двата масива.
    https://www.geeksforgeeks.org/median-of-two-sorted-arrays-of-different-sizes/

-4. Алгоритъм, който размества елементите на а[], така че всички отрицателни числа да са вляво от всички положителни.
    https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/
    
-5. Сортиран масив съдържа числата от О до n включително, без повторения, като има едно липсващо число. Да се намери липсващото.
    http://www.informatika.bg/interviews#ExactlyOneMissing
    https://www.geeksforgeeks.org/find-the-missing-number-in-a-sorted-array/
    
-5*. Сортиран масив съдържа числата от О до n включително, с точно едно повтарящо се число. Да се намери повторящото се.
    http://www.informatika.bg/interviews#ExactlyOneRepeated

-6. Даден е масив с естествени числа. Кое е най-малкото естествено число, което не се съдържа в масива?
    http://www.informatika.bg/interviews#FirstMissing
    
7. Масив с цели числа. Да се намери има ли тройка числа, чиято сума е 0.
bool 3SUM(int a*, int n) 
{
    std::sort(a, a + n); 
    int i, j, k, s; 
    for(i = 0; i < n - 2; i++) 
    {
        j = i + 1, k = n;
        while (j < k)
        {
            s = a[i] + a[j] + a[k];
            if (s == 0)
            {
                printf("%d, %d, %d\n", a[i], a[j], a[k]); 
                return true;
            } 
            else if (s < 0)
            {
                j++;
            } 
            else
            {
                k--;
            }
        }
    }
    return false;
}
Тази версия извежда всички възможни решения. Сложността ѝ е O(n^2).
Вътрешният цикъл включва два броча, които „вървят“ един срещу друг.
    http://www.informatika.bg/interviews#ZeroSum
    https://www.geeksforgeeks.org/find-a-triplet-that-sum-to-a-given-value/
    https://fizzbuzzed.com/top-interview-questions-1/

-8. Масив с n естествени числа, всяко между 1 и n включително. Да се намери има ли
повтарящо се число. (Разрешено е да се променят числата в масива).
    http://www.informatika.bg/interviews#RepeatedElement
    https://www.geeksforgeeks.org/find-duplicates-in-on-time-and-constant-extra-space/
    
9. Да се сортира масив а [1, .. , n] чрез следната операция: изпълнението на операцията с
аргумент k обръща реда на елементите с индекси от 1 до k в масива (2 <= k <= n). T.e.
алгоритъмът да намира последователните стойности на k, с които трябва да се приложи
oneрацията.
    Пример: a[] = [2, 3, 1]; 
    1) k = 2 => a[] = [3, 2, 1] 
    2) k = 3 => a[] = [1, 2, 3]
    https://www.geeksforgeeks.org/pancake-sorting/
    
10. Да се намерят всички най-често срещани елементи на масив a[1, .. , n].
void findAllMods(unsigned * a, int n)
{
    sort(a, a + n);
    stack<pair<int, int> > st;
    st.push(pair<int, int>(a[0], 0));
    int s;
    for (int i = 1; i < n; i++)
    {
        s = 1;
        while (a[i] == a[i - 1] && i < n)
        { 
            i++;
            s++;
        }

        if (s >= st.top().second)
        {
            st.push(pair<int, int>(a[i - 1], s));
        }
    }
    s = st.top().second;
    while (st.top().second == s)
    {
        printf("%d %d\n", st.top().first, st.top().second);
        st.pop();
    }
}
Пазим най-често срещаните елементи и честотата им в стек. След като са
сортирани, честотата може да се намери лесно, тъй като еднаквите елементи са един
след друг в масива.
Вкарваме елемент в стека, само ако върхът му е с не по-голяма честота от
текущо разглеждания елемент.
Извеждаме елементите с най-голяма честота от стека. Те започват от върха му.
Цикълът, които извежда тези елементи спира, тъй като дъното на стека е с
честота 0. Този елемент не носи информация за масива, а просто е сложен като разделител.
    https://www.geeksforgeeks.org/frequent-element-array/

-11. Даден е масив с положителни цели числа. Има ли сред тях две, разликата на които 
се дели на n?
bool findDifferenceDivisibleByK(unsigned * a, int n, int k)
{
    bool p[k] = { false };
    for (int i = 0; i < n; i++)
    {
        if (p[a[i] % k] == true)
        { 
            return true;
        }
        else 
        {
            p[a[i] % k] = true;
        }
    }
    return false;
}

bool findDifferenceDivisibleByKVersion2(unsigned * a, int n, int k)
{
    for (int i = 0; i < n; i++)
    {
        if (a[abs(a[i]) % k] < 0)
        { 
            return true;
        }
        else 
        {
            a[abs(a[i]) % k] = -abs(a[abs(a[i]) % k]);
        }
    }
    return false;
}
За всеки индекс от булевия масив пазим дали има елемент, които дава остатък
i при делене на n. За да се дели разликата на 2 елемента на е необходимо, те да дава
еднакви остатъци при делене на n.
    https://www.geeksforgeeks.org/find-set-m-element-whose-difference-two-element-divisible-k/
    https://www.geeksforgeeks.org/count-pairs-in-array-whose-sum-is-divisible-by-k/
